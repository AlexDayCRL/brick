/**
***************************************************************************
* @file brick/computerVision/calibrationToolsRobust.hh
*
* Header file declaring robust extensions of the utility routines
* declared in calibrationTools.h.
*
* Copyright (C) 2010-2012 David LaRose, dlr@cs.cmu.edu
* See accompanying file, LICENSE.TXT, for details.
*
***************************************************************************
*/

#ifndef BRICK_COMPUTERVISION_CALIBRATIONTOOLSROBUST_HH
#define BRICK_COMPUTERVISION_CALIBRATIONTOOLSROBUST_HH

#include <brick/computerVision/cameraIntrinsicsPinhole.hh>
#include <brick/numeric/transform3D.hh>

namespace brick {

  namespace computerVision {

    /**
     * This function estimates camera intrinsic and extrinsic
     * parameters for "complicated" types of camera intrinsics that
     * require nonlinear optimization.  It takes as input 3D points
     * expressed in world coordinates, and 2D points expressed in
     * image coordinates, and estimates both camera intrinsics
     * (distortion and projection parameters) and extrinsics (the
     * position of the camera with respect to the world).  It differs
     * from the function estimateCameraParametersPinholeRobust() in
     * that it tries to recover lens distortion parameters.  If this
     * function fails to estimate the intrinsics based on the input
     * points, it will throw ValueException.
     *
     * @param intrinsics This reference argument is used to return the
     * estimated camera intrinsics.
     *
     * @param cameraTworld This reference argument is used to return
     * the estimated coordinate transformation that takes world
     * coordinates and returns the corresponding camera coordinates.
     *
     * @param numPixelsX This argument specifies the number of columns
     * in images generated by the camera for which intrinsics are
     * being estimated.
     *
     * @param numPixelsY This argument specifies the number of columns
     * in images generated by the camera for which intrinsics are
     * being estimated.
     *
     * @param points3DBegin This argument is an iterator pointing to
     * the beginning of a sequence of 3D points, represented as
     * brick::numeric::Vector3D<Intrinsics::FloatType>, in world
     * coordinates.  The minimum length of this sequence depends on
     * the type of camera intrinsics being estimated.
     *
     * @param points3DEnd This argument is an iterator pointing one
     * element past the end of the sequence of 3D points in world
     * coordinates (following the standard library iterator
     * convention).
     *
     * @param points2DBegin This argument is an iterator pointing to
     * the beginning of a sequence of 2D points, represented as
     * brick::numeric::Vector2D<Intrinsics::FloatType> in pixel
     * coordinates, corresponding to the the sequence defined by
     * points3DBegin and points3DEnd.  Each element of this sequence
     * must be the projection of the corresponding element of the
     * sequence of 3D points.
     *
     * @param maxResidual This argument specifies, in pixels, how
     * closely you expect the 3D points to project to the
     * corresponding 2D points once the calibration is completed.
     * Points that have residuals higher than this number will be
     * considered to be outliers.
     *
     * @param inlierProbability This argument indicates the likelihood
     * that any particular pair of corresponding 3D and 2D points is
     * correctly measured (is not a noisy outlier).  For example, if
     * you have 100 sample points, and think that 30 of them have
     * excessive noise, then set this argument to 0.7.  It affects the
     * number of iterations that the RANSAC algorithm will be allowed
     * to run.
     *
     * @param requiredConfidence This argument indicates how confident
     * we need to be that we've found the right calibration.  It
     * affects the number of iterations that the RANSAC algorithm will
     * be allowed to run, as well as the automatically computed value
     * for minimumConsensusSize (see below).
     *
     * @param minimumConsensusSize This argument specifies the
     * smallest set of "agreeing" samples that should be taken as
     * proof that the correct model has been found (and grounds for
     * terminating the algorithm).  Setting this value to zero will
     * make an appropriate number be computed using arguments
     * requiredConfidence and inlierProbability.
     *
     * @param verbosity This argument sets the level of standard
     * output generated by the function call (0 means none).
     */
    template <class Intrinsics, class Iter3D, class Iter2D>
    void
    estimateCameraParametersRobust(
      Intrinsics& intrinsics,
      numeric::Transform3D<typename Intrinsics::FloatType>& cameraTworld,
      unsigned int numPixelsX,
      unsigned int numPixelsY,
      Iter3D points3DBegin,
      Iter3D points3DEnd,
      Iter2D points2DBegin,
      typename Intrinsics::FloatType maxResidual,
      typename Intrinsics::FloatType inlierProbability,
      typename Intrinsics::FloatType requiredConfidence = 0.999,
      unsigned int minConsensusSetSize = 0,
      unsigned int verbosity = 0);


    /**
     * This function estimates pinhole camera intrinsic and extrinsic
     * parameters based on corresponding points in 2D image
     * coordinates and 3D world coordinates.  It differs from the
     * function estimateCameraIntrinsicsPinhole() in that the 3D
     * points are expressed in world coordinates, and the camera
     * extrinsics (the position of the camera with respect to the
     * world) are estimated.  It is also less accurate.  It differs
     * from the function estimateCameraParameters() in that it does
     * not try to recover lens distortion parameters.
     *
     * The transformation between world coordinates
     * and camera coordinates will be estimated and returned via
     * reference argument cameraTworld.  If it is not possible to
     * compute a valid CameraIntrinsicsPinhole instance from the input
     * points, this function will throw ValueException.
     *
     * @param intrinsics This reference argument is used to return the
     * estimated camera intrinsics.
     *
     * @param cameraTworld This reference argument is used to return
     * the estimated coordinate transformation that takes world
     * coordinates and returns the corresponding camera coordinates.
     *
     * @param numPixelsX This argument specifies the number of columns
     * in images corresponding to this pinhole camera.  It is copied
     * directly in to the return value, and does not otherwise affect
     * the operation of this function.
     *
     * @param numPixelsY This argument specifies the number of columns
     * in images corresponding to this pinhole camera.  It is copied
     * directly in to the return value, and does not otherwise affect
     * the operation of this function.
     *
     * @param points3DBegin This argument is an iterator pointing to
     * the beginning of a sequence of 3D points, represented as
     * brick::numeric::Vector3D<FloatType>, in world coordinates.  The
     * sequence must contain at least 3 elements.
     *
     * @param points3DEnd This argument is an iterator pointing one
     * element past the end of the sequence of 3D points in world
     * coordinates (following the standard library iterator
     * convention).
     *
     * @param points2DBegin This argument is an iterator pointing to
     * the beginning of a sequence of 2D points, represented as
     * brick::numeric::Vector2D<FloatType>, in pixel coordinates,
     * corresponding to the the sequence defined by points3DBegin and
     * points3DEnd.  Each element of this sequence must be the
     * projection of the corresponding element of the sequence of 3D
     * image points.
     *
     * @param maxResidual This argument specifies, in pixels, how
     * closely you expect the 3D points to project to the
     * corresponding 2D points once the calibration is completed.
     * Points that have residuals higher than this number will be
     * considered to be outliers.
     *
     * @param inlierProbability This argument indicates the likelihood
     * that any particular pair of corresponding 3D and 2D points is
     * correctly measured (is not a noisy outlier).  For example, if
     * you have 100 sample points, and think that 30 of them have
     * excessive noise, then set this argument to 0.7.  It affects the
     * number of iterations that the RANSAC algorithm will be allowed
     * to run.
     *
     * @param requiredConfidence This argument indicates how confident
     * we need to be that we've found the right calibration.  It
     * affects the number of iterations that the RANSAC algorithm will
     * be allowed to run, as well as the automatically computed value
     * for minimumConsensusSize (see below).
     *
     * @param minimumConsensusSize This argument specifies the
     * smallest set of "agreeing" samples that should be taken as
     * proof that the correct model has been found (and grounds for
     * terminating the algorithm).  Setting this value to zero will
     * make an appropriate number be computed using arguments
     * requiredConfidence and inlierProbability.
     *
     * @param verbosity This argument sets the level of standard
     * output generated by the function call (0 means none).
     */
    template <class FloatType, class Iter3D, class Iter2D>
    void
    estimateCameraParametersPinholeRobust(
      CameraIntrinsicsPinhole<FloatType>& intrinsics,
      numeric::Transform3D<FloatType>& cameraTworld,
      unsigned int numPixelsX,
      unsigned int numPixelsY,
      Iter3D points3DBegin,
      Iter3D points3DEnd,
      Iter2D points2DBegin,
      FloatType maxResidual,
      FloatType inlierProbability,
      FloatType requiredConfidence = 0.999,
      unsigned int minConsensusSetSize = 0,
      unsigned int verbosity = 0);


  } // namespace computerVision

} // namespace brick


// Include file containing definitions of inline and template
// functions.
#include <brick/computerVision/calibrationToolsRobust_impl.hh>

#endif /* #ifndef BRICK_COMPUTERVISION_CALIBRATIONTOOLSROBUST_HH */
